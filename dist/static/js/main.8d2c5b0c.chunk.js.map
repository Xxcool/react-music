{"version":3,"sources":["store/action-type.js","store/action.js","api/request.js","api/index.js","utils/localStorage.js","utils/animation.js","utils/stopBodyScroll.js","component/content/Loading.js","component/content/Prompt.js","router/index.js","utils/parseLyric.js","static/js/rem.js","store/reducer.js","store/index.js","component/common/SmallPlayer.js","App.js","serviceWorker.js","index.js"],"names":["IDLOGIN","GETMENUSIDATA","GETISPLAY","GETPROGRESS","GETCURRENTTIME","GETDURATION","GETPLARYSTATUS","GETPLARYLRYIC","GETLYLRYICINDEX","GETPLARYELIST","GETPLAYERINDEX","GETMODENUM","GETTHEMENAME","getIsLogin","obj","type","data","getMenusData","getIsPlay","bol","getProgress","progress","getCurrentTime","currentTime","getDuration","duration","getPlayStatus","getPlayLyric","arr","getActivateIndex","index","getPlayerList","getPlayerIndex","getModeNum","num","getThemeName","name","request","url","method","Promise","resolve","reject","axios","get","params","post","then","res","catch","err","defaults","baseURL","withCredentials","interceptors","response","use","getBanner","getRecommendSong","limit","getUserRecommend","getSong","cat","order","getSongDetails","id","getSongHot","getSongHandpick","getRankSong","getDjBanner","getDjRecommend","getDjProgram","getSearchHot","getSearchSuggest","keywords","getSearchDetailList","getLogin","phone","password","getUserSong","getLoginStatus","getUserFollows","getUserOut","getVideoTag","getVideoTagData","geiVideoSrc","getVideoDetails","getVideoCommon","getIsMenusPlay","getSongRUrl","getSongLyric","NewMusicData","getLocalStorage","JSON","parse","localStorage","getItem","setLocalStorage","setItem","stringify","recommendLocalStorage","removeItem","animation","dom","target","time","callBack","start","speed","attr","parseFloat","getStyle","startTime","Date","timer","setInterval","_t","style","clearInterval","call","currentStyle","window","getComputedStyle","isFixed","bodyEl","document","body","overflow","Loading","className","Prompt","props","state","isPrompt","promptRef","createRef","this","setState","stopBodyScroll","current","opacity","msg","ref","display","Component","lazy","React","Home","Search","Recommend","SongSheet","Rank","DJ","VideoDetails","Player","Discover","My","Video","stairRouter","path","component","secondRouter","exact","lyricParser","lrc","lyrics","split","newArr","i","length","lyric","decodeURIComponent","timeReg","timeRegExpArr","match","content","replace","k","h","t","min","Number","String","slice","sec","push","parseLyric","change","html","querySelector","width","screen","fontSize","addEventListener","storageConfig","key","storage","storageSession","whitelist","myPersistReducer","persistReducer","store","loginStatus","player","isPlay","isPlayStatus","activateIndex","playerList","playerIndex","modeNum","modeTypeArr","icon","themeName","action","Object","assign","createStore","applyMiddleware","thunk","persistor","persistStore","SmallPlayer","handleClickToggle","handlePause","handlePlay","handleTimeupdate","audio","audioRef","findIndex","item","array","nextLyric","handleCanPlay","handleEonended","a","modePlayer","random","Math","floor","load","handlePromptToggle","console","log","keys","playPromise","play","undefined","pause","is","result","resultLyric","location","pathname","onClick","to","src","picUrl","alt","preload","onTimeUpdate","onCanPlay","onEnded","withRouter","connect","App","setTheme","href","nextProps","nextState","nextContext","fallback","paddingBottom","map","when","behavior","cached","position","zIndex","visibility","pointerEvents","saveScrollPosition","Boolean","hostname","ReactDOM","render","loading","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8d2c5b0c.chunk.js","sourcesContent":["// 是否用户已经登陆的\r\nexport const IDLOGIN = 'IDLOGIN'\r\n// 获取音乐播放歌曲数据\r\nexport const GETMENUSIDATA = 'GETMENUSIDATA'\r\n// 获取当前音乐是否播放\r\nexport const GETISPLAY = 'GETISPLAY'\r\n// 获取当前音乐播放的进度\r\nexport const GETPROGRESS = 'GETPROGRESS'\r\n// 获取当前音乐的播放时间\r\nexport const GETCURRENTTIME = 'GETCURRENTTIME'\r\n// 获取当前音乐播放的总时间\r\nexport const GETDURATION = 'GETDURATION'\r\n// 获取当前音乐播放的状态\r\nexport const GETPLARYSTATUS = 'GETPLARYSTATUS'\r\n// 获取当前播放音乐的歌词\r\nexport const GETPLARYLRYIC = 'GETPLARYLRYIC'\r\n// 获取当前正在播放歌词的索引值\r\nexport const GETLYLRYICINDEX = 'GETLYLRYICINDEX'\r\n// 获取当前播放列表的数据\r\nexport const GETPLARYELIST = 'GETPLARYELIST'\r\n// 获取当前播放列表数据的索引值\r\nexport const GETPLAYERINDEX = 'GETPLAYERINDEX'\r\n// 获取当前模式播放的数值\r\nexport const GETMODENUM = 'GETMODENUM'\r\n// 获取切换主题颜色名称的数据\r\nexport const GETTHEMENAME = 'GETTHEMENAME'\r\n","import {\r\n    IDLOGIN,\r\n    GETMENUSIDATA,\r\n    GETISPLAY,\r\n    GETPROGRESS,\r\n    GETCURRENTTIME,\r\n    GETDURATION,\r\n    GETPLARYSTATUS,\r\n    GETPLARYLRYIC,\r\n    GETLYLRYICINDEX,\r\n    GETPLARYELIST,\r\n    GETPLAYERINDEX,\r\n    GETMODENUM,\r\n    GETTHEMENAME\r\n} from './action-type'\r\n\r\n// 暴露是否已经登陆\r\nexport const getIsLogin = (obj = {}) => ({\r\n    type:IDLOGIN,\r\n    data:obj\r\n})\r\n\r\n// 暴露获取音乐播放器数据\r\nexport const getMenusData = (obj = {}) => ({\r\n    type: GETMENUSIDATA,\r\n    data: obj\r\n})\r\n\r\n// 暴露获取当前音乐是否播放\r\nexport const getIsPlay = (bol = false) => ({\r\n    type: GETISPLAY,\r\n    data: bol\r\n})\r\n\r\n// 暴露获取当前播放音乐的进度\r\nexport const getProgress = (progress = '0%') => ({\r\n    type: GETPROGRESS,\r\n    data: progress\r\n})\r\n\r\n// 暴露获取当前音乐播放的时间\r\nexport const getCurrentTime = (currentTime = 0) => ({\r\n    type: GETCURRENTTIME,\r\n    data: currentTime\r\n})\r\n\r\n// 暴露获取当前音乐的总时间\r\nexport const getDuration = (duration = 0) => ({\r\n    type: GETDURATION,\r\n    data: duration\r\n})\r\n\r\n// 暴露获取当前播放音乐的状态\r\nexport const getPlayStatus = (bol = false) => ({\r\n    type: GETPLARYSTATUS,\r\n    data: bol\r\n})\r\n\r\n// 暴露获取播放歌词数据的状态\r\nexport const getPlayLyric = (arr = []) => ({\r\n    type: GETPLARYLRYIC,\r\n    data: arr\r\n})\r\n\r\n// 暴露获取当前歌词正在播放的索引值\r\nexport const getActivateIndex = (index = 0) => ({\r\n    type: GETLYLRYICINDEX,\r\n    data: index\r\n})\r\n\r\n// 暴露获取当前播放列表的数据\r\nexport const getPlayerList = (arr = []) => ({\r\n    type: GETPLARYELIST,\r\n    data: arr\r\n})\r\n\r\n// 暴露获取当前播放列表的索引值的数据\r\nexport const getPlayerIndex = (index = 0) => ({\r\n    type: GETPLAYERINDEX,\r\n    data: index\r\n})\r\n\r\n// 暴露获取当前模式播放数值的数据\r\nexport const getModeNum = (num = 0) => ({\r\n    type: GETMODENUM,\r\n    data: num\r\n})\r\n\r\n// 暴露获取当前切换主题名称的数据\r\nexport const getThemeName = (name = 'red') => ({\r\n    type: GETTHEMENAME,\r\n    data: name\r\n})\r\n","\r\nimport axios from 'axios'\r\n\r\n// 设置请求代理路径\r\naxios.defaults.baseURL = 'http://localhost:8000'\r\naxios.defaults.withCredentials = true; //配置为true\r\naxios.interceptors.response.use(res => res)\r\n\r\nexport default function request (url, data = {}, method = 'get') {\r\n  return new Promise((resolve, reject) => {\r\n    let p = null\r\n    if (method === 'get') { // 如果是get请求\r\n      p = axios.get(url, {\r\n        params: data\r\n      })\r\n    } else {\r\n      p = axios.post(url, data)\r\n    }\r\n    p.then(res => {\r\n      resolve(res)\r\n    }).catch(err => {\r\n      reject(err)\r\n    })\r\n  })\r\n}\r\n","import request from  './request'\r\n\r\n// 获取轮播图数据的接口请求函数\r\nexport const getBanner = (type = 1) => request(`/banner?type=${type}`)\r\n// 获取推荐歌单数据的接口请求函数\r\nexport const getRecommendSong = (limit = 8) => request(`/personalized?limit=${limit}`)\r\n\r\n// 获取用户每日推荐歌曲数据的接口请求函数\r\nexport const getUserRecommend = () => request('/recommend/songs')\r\n\r\n// 获取歌单数据的接口请求函数\r\nexport const getSong = (cat = '华语', order = 'hot', limit = 39) => request(`/top/playlist/highquality?cat=${cat}&limit=${limit}&order=${order}`)\r\n// 获取歌单详情数据的接口请求函数\r\nexport const getSongDetails = id => request(`/playlist/detail?id=${id}`)\r\n// 获取热门歌单分类数据的接口请求函数\r\nexport const getSongHot = () => request('/playlist/hot')\r\n// 获取歌单(网友精选碟)的接口请求函数\r\nexport const getSongHandpick = (limit = 39, cat = '华语', order = 'hot') => request(`/top/playlist?limit=${limit}&cat=${cat}&order=${order}`)\r\n\r\n// 获取官方榜歌单数据的接口请求函数\r\nexport const getRankSong = () => request('/toplist/detail')\r\n// 获取电台轮播图数据的接口请求函数\r\nexport const getDjBanner = () => request('/dj/banner')\r\n// 获取电台推荐歌单数据的接口请求函数\r\nexport const getDjRecommend = () => request('/dj/category/recommend')\r\n// 获取电台节目榜列表数据的接口请求函数\r\nexport const getDjProgram = (limit = 30) => request(`/dj/program/toplist/hours?limit=${limit}`)\r\n\r\n\r\n// 获取搜索最火热歌曲数据接口请求函数\r\nexport const getSearchHot = () => request(`/search/hot/detail`)\r\n// 获取建议搜索数据接口请求函数\r\nexport const getSearchSuggest = (keywords,type='mobile') => request(`/search/suggest?type=${type}&keywords=${keywords}`)\r\n// 获取建议搜索详情列表数据的接口请求函数\r\nexport const getSearchDetailList = (keywords, limit = 15) => request(`/search?keywords=${keywords}&limit=${limit}`)\r\n\r\n// 请求登陆用户的接口请求函数\r\nexport const getLogin = (phone, password) => request(`/login/cellphone?phone=${phone}&password=${password}`)\r\n// 获取用户歌单的接口请求函数\r\nexport const getUserSong = id => request(`/user/playlist?uid=${id}`)\r\n// 获取用户登陆的状态接口请求函数\r\nexport const getLoginStatus = () => request('/login/status')\r\n// 获取用户关注列表数据的接口请求函数\r\nexport const getUserFollows = id => request(`/user/follows?uid=${id}`)\r\n// 退出用户的接口请求函数\r\nexport const getUserOut = () => request('/logout')\r\n\r\n// 获取视频标签类型的接口请求函数\r\nexport const getVideoTag = () => request('/video/group/list')\r\n// 获取视频分类的视频数据接口请求函数\r\nexport const getVideoTagData = id => request(`/video/group?id=${id}`)\r\n// 获取视频播放路径数据的接口请求函数\r\nexport const geiVideoSrc = id => request(`/video/url?id=${id}`)\r\n// 获取视频详情数据的接口请求函数\r\nexport const getVideoDetails = id => request(`/video/detail?id=${id}`)\r\n// 获取视频评论数据的接口请求函数\r\nexport const getVideoCommon = id => request(`/comment/video?id=${id}`)\r\n\r\n// 获取当前播放的歌曲是是否可以播放\r\nexport const getIsMenusPlay = id => request(`/check/music?id=${id}`)\r\n// 获取播放音乐的URL路径\r\nexport const getSongRUrl = id => request(`/song/url?id=${id}`)\r\n// 获取播放音乐歌词的接口请求函数\r\nexport const getSongLyric = id => request(`/lyric?id=${id}`)\r\n\r\n// 最新音乐数据\r\nexport const NewMusicData = () => request('/personalized/newsong')\r\n","// 本文件是操作本地存储数据的localStorage\r\n\r\nexport default {\r\n    getLocalStorage (name) { // 获取\r\n        return JSON.parse(localStorage.getItem(name))\r\n    },\r\n    setLocalStorage (name, data) { // 设置\r\n        localStorage.setItem(name, JSON.stringify(data))\r\n    },\r\n    recommendLocalStorage (name) { // 删除\r\n        localStorage.removeItem(name)\r\n    }\r\n}\r\n","// 动画函数，可以改变CSS数值属性的CSS样式 如opacity\r\nexport default function animation(dom,target,time,callBack){\r\n    /*\r\n       dom是oBox元素；\r\n       attr是width值\r\n       target是要变化到的值\r\n       times是变化的时间n秒\r\n    */\r\n\r\n    //遍历对象 attr是对象的属性名\r\n    var start = {};//存放dom样式的初始值\r\n    var speed = {};//存放dom样式的速度\r\n    for(var attr in target){\r\n         start[attr] = parseFloat(getStyle(dom,attr));\r\n         speed[attr] = (target[attr] - start[attr])/(time*1000);\r\n    }\r\n    var startTime = new Date();//获取dom运动的初始时间\r\n    var timer = setInterval(function(){\r\n        //回调函数的作用是让dom元素运动\r\n        var movedTime  = new Date();//获取最新时间、\r\n        var _t = movedTime - startTime;//计算dom元素运动的时间差 单位是ms\r\n        for(let attr in target){\r\n            if (attr==='opacity') {\r\n                dom.style[attr] = start[attr]+speed[attr]*_t;\r\n            }else {\r\n                dom.style[attr] = start[attr]+speed[attr]*_t+\"px\";\r\n            }\r\n        }\r\n        //如果dom运动的时间差值大于 指定的时间time 那就清除掉定时器clearInterval(timer);\r\n      if(_t/1000>=time){\r\n        clearInterval(timer);\r\n        for(let attr in target){\r\n            if(attr==='opacity'){\r\n                dom.style[attr] = target[attr];\r\n            }else{\r\n                dom.style[attr] = target[attr]+'px';\r\n            }\r\n        };\r\n        //当运动到终点值的时候  执行回调函数\r\n        callBack&&callBack.call(dom,start,time);\r\n    }\r\n\r\n    },16)\r\n    //获取元素的初始值\r\n    function getStyle(dom,attr){\r\n        if (dom.currentStyle) {\r\n            return dom.currentStyle;\r\n        }else {\r\n            return window.getComputedStyle(dom,null)[attr];\r\n        }\r\n    }\r\n}\r\n","// 很简单的一个工具类函数，用于隐藏body的滚动条\r\n// 他接收一个布尔值，用户判断你当前是否在进行模态框等全屏的操作\r\nexport default function (isFixed) {\r\n    const bodyEl = document.body\r\n    if (isFixed) {\r\n        bodyEl.style.overflow = 'hidden'\r\n    } else {\r\n        bodyEl.style.overflow = 'inherit'\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\n// 路由懒加载显示的组件内容\r\nconst Loading = () => {\r\n    return (\r\n        <div className={'lds-roller'}>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React, { Component, createRef } from 'react'\r\nimport animation from '../../utils/animation'\r\nimport stopBodyScroll from '../../utils/stopBodyScroll'\r\nexport default class Prompt extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.promptRef = createRef()\r\n    }\r\n    state = {\r\n        isPrompt: false // 是否显示消息提示组件\r\n    }\r\n    // 点击触发提示组件的淡入淡出效果\r\n    handlePromptToggle () {\r\n        this.setState({\r\n            isPrompt: true\r\n        }, () => {\r\n            stopBodyScroll(true)\r\n            animation(this.promptRef.current, {\r\n                opacity: 1\r\n            }, .5, () => {\r\n                animation(this.promptRef.current, {\r\n                    opacity: 0\r\n                }, .5, () => {\r\n                    stopBodyScroll(false)\r\n                    this.setState({\r\n                        isPrompt: false\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        /*\r\n            props参数\r\n                msg：显示节点的内容/字符串或者是DOM节点(可选)\r\n        */\r\n        const {msg = ''} = this.props\r\n        const {isPrompt} = this.state\r\n        return (\r\n            <div className=\"prompt\" ref={this.promptRef} style={{display: isPrompt ? 'block' : 'none'}}>\r\n                {msg}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\r\nimport React from \"react\";\r\n\r\nconst {lazy} = React\r\n// 路由懒加载\r\nconst Home = lazy(() => import(\"../views/Home/Home\"))\r\nconst Search = lazy(() => import(\"../views/Search/Search\"))\r\nconst Recommend = lazy(() => import(\"../views/Recommend/Recommend\"))\r\nconst SongSheet = lazy(() => import(\"../views/SongSheet/SongSheet\"))\r\nconst Rank = lazy(() => import(\"../views/Rank/Rank\"))\r\nconst DJ = lazy(() => import(\"../views/DJ/DJ\"))\r\nconst VideoDetails = lazy(() => import(\"../views/VideoDetails/VideoDetails\"))\r\nconst Player = lazy(() => import(\"../views/Player/Player\"))\r\nconst Discover = lazy(() => import(\"../views/Discover/Discover\"))\r\nconst My = lazy(() => import(\"../views/My/My\"))\r\nconst Video = lazy(() => import(\"../views/Video/Video\"))\r\nconst Skin = lazy(() => import(\"../views/Skin/Skin\"))\r\n\r\n// 一级路由\r\nexport const stairRouter = [\r\n    {path: '/home', component: Home},\r\n    {path: '/search', component: Search},\r\n    {path: '/recommend', component: Recommend},\r\n    {path: '/songSheet', component: SongSheet},\r\n    {path: '/rank', component: Rank},\r\n    {path: '/dj', component: DJ},\r\n    {path: '/videoDetails/:id', component: VideoDetails},\r\n    {path: '/player', component: Player},\r\n    {path: '/skin', component: Skin}\r\n]\r\n\r\n// 二级路由\r\nexport const secondRouter = [\r\n    {path: '/', component: Discover, exact: true},\r\n    {path: '/home/discover', component: Discover},\r\n    {path: '/home/my', component: My},\r\n    {path: '/home/video', component: Video}\r\n]","// 我们把获取到的字符串的形式的歌词转换成数组形式的歌词\r\nexport default function lyricParser (lrc) {\r\n    return parseLyric(lrc || '')\r\n}\r\n\r\nfunction parseLyric (lrc) {\r\n    const lyrics = lrc.split('\\n')\r\n    const newArr = []\r\n    for (let i=0; i<lyrics.length; i++) {\r\n        const lyric = decodeURIComponent(lyrics[i]);\r\n        const timeReg = /\\[\\d*:\\d*((\\.|:)\\d*)*\\]/g\r\n        const timeRegExpArr = lyric.match(timeReg)\r\n        if (!timeRegExpArr) continue\r\n        const content = lyric.replace(timeReg, '')\r\n        for (let k=0, h = timeRegExpArr.length; k < h; k++) {\r\n            const t = timeRegExpArr[k]\r\n            const min = Number(String(t.match(/\\[\\d*/i)).slice(1))\r\n            const sec = Number(String(t.match(/:\\d*/i)).slice(1))\r\n            const time = min * 60 + sec\r\n            if (content !== '') {\r\n                newArr.push({\r\n                    time: time,\r\n                    content\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return newArr\r\n}\r\n","(function () {\r\n  change()\r\n  //当切换到不同的设备时 触发change函数\r\n  window.addEventListener('resize',change)\r\n  function change(){\r\n      const html = document.querySelector('html')\r\n      //获取手机设备的宽度值\r\n      const width = window.screen.width;\r\n      //设置html元素的font-size\r\n      // 1rem 37.5px    10rem 375px  375px 和当前设备的屏幕等宽\r\n      // 10rem/750 = x/设计图的尺寸\r\n      html.style.fontSize = width/10+'px'\r\n  }\r\n})()","import {\r\n    IDLOGIN,\r\n    GETMENUSIDATA,\r\n    GETISPLAY,\r\n    GETPROGRESS,\r\n    GETCURRENTTIME,\r\n    GETDURATION,\r\n    GETPLARYSTATUS,\r\n    GETPLARYLRYIC,\r\n    GETLYLRYICINDEX,\r\n    GETPLARYELIST,\r\n    GETPLAYERINDEX,\r\n    GETMODENUM,\r\n    GETTHEMENAME\r\n} from './action-type'\r\nimport localStorage from '../utils/localStorage'\r\nconst {getLocalStorage} = localStorage\r\nexport default function (store = {\r\n    loginStatus: {}, // 用户登陆状态\r\n    player: getLocalStorage('player') || {}, // 音乐播放器的数据\r\n    isPlay: false, // 当前歌曲是否播放\r\n    progress: '0%', // 当前歌曲的播放进度\r\n    currentTime: 0, // 当前播放音乐的时间\r\n    duration: 0, // 当前播放音乐的总时间\r\n    isPlayStatus: false, // 当前播放音乐的状态\r\n    lyric: [], // 音乐歌词\r\n    activateIndex: 0, // 播放歌词音乐的索引值\r\n    playerList: getLocalStorage('playerList') || [], // 当前播放列表\r\n    playerIndex: getLocalStorage('playerIndex') || 0, // 当前播放列表的索引值\r\n    modeNum:  0, // 当前播放歌曲的模式 0(顺序播放) 1(随机播放) 2(单曲循环)\r\n    modeTypeArr: [ // 模式类型的数组\r\n        {\r\n            icon: 'icon-zhongxinshangchuan',\r\n            msg: '顺序播放'\r\n        },\r\n        {\r\n            icon: 'icon-suijibofang',\r\n            msg: '随机播放'\r\n        },\r\n        {\r\n            icon: 'icon-danquxunhuan',\r\n            msg: '单曲循环'\r\n        }\r\n    ],\r\n    themeName: getLocalStorage('themeName') || {name:'red'} // 当前切换主题的名称\r\n} , action){\r\n    switch (action.type) {\r\n        // 设置用户登陆的状态\r\n        case IDLOGIN :\r\n            return Object.assign({},store,{\r\n                loginStatus: action.data\r\n            })\r\n        // 设置音乐播放器的数据\r\n        case GETMENUSIDATA :\r\n            return Object.assign({},store,{\r\n                player: action.data\r\n            })\r\n        // 设置当前歌曲是否播放\r\n        case GETISPLAY :\r\n            return Object.assign({},store,{\r\n                isPlay: action.data\r\n            })\r\n        // 获取当前歌曲的进度\r\n        case GETPROGRESS :\r\n            return Object.assign({},store,{\r\n                progress: action.data\r\n            })\r\n        // 获取当前播放的音频时间\r\n        case GETCURRENTTIME :\r\n            return Object.assign({},store,{\r\n                currentTime: action.data\r\n            })\r\n        // 获取当前音乐播放视频的总时间\r\n        case GETDURATION :\r\n            return Object.assign({},store,{\r\n                duration: action.data\r\n            })\r\n        // 设置当前音乐播放的状态\r\n        case GETPLARYSTATUS :\r\n            return  Object.assign({},store, {\r\n                isPlayStatus: action.data\r\n            })\r\n        // 获取当前音乐播放的歌词\r\n        case GETPLARYLRYIC :\r\n            return Object.assign({},store,{\r\n                lyric: action.data\r\n            })\r\n        // 获取当前播放音乐歌词的索引值\r\n        case GETLYLRYICINDEX :\r\n            return Object.assign({},store,{\r\n                activateIndex: action.data\r\n            })\r\n        // 获取当前播放列表的数据\r\n        case GETPLARYELIST :\r\n            return Object.assign({},store,{\r\n                playerList: action.data\r\n            })\r\n        // 获取当前播放列表的索引值\r\n        case GETPLAYERINDEX :\r\n            return Object.assign({},store,{\r\n                playerIndex: action.data\r\n            })\r\n        // 设置当前模式播放的数值\r\n        case GETMODENUM :\r\n            return Object.assign({},store,{\r\n                modeNum: action.data\r\n            })\r\n        // 设置当前主题切换名称的数据\r\n        case GETTHEMENAME :\r\n            return Object.assign({},store,{\r\n                themeName: action.data\r\n            })\r\n        default :\r\n            return store\r\n    }\r\n}\r\n","import {createStore,applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducer from './reducer'\r\nimport {persistStore, persistReducer} from 'redux-persist';\r\n//  存储机制，可换成其他机制，当前使用sessionStorage机制\r\nimport storageSession from 'redux-persist/lib/storage/session'\r\n\r\nconst storageConfig = {\r\n  key: 'root', // 必须有的\r\n  storage:storageSession, // 缓存机制\r\n  whitelist: ['loginStatus',] // reducer 里持久化的数据,除此外均为不持久化数据\r\n}\r\n\r\nconst myPersistReducer = persistReducer(storageConfig, reducer);\r\n\r\n// 创建store实例\r\nlet store = createStore(\r\n    myPersistReducer,\r\n    applyMiddleware(thunk)\r\n);\r\nexport const persistor = persistStore(store)\r\nexport default store\r\n","import React, {Component,createRef,Fragment} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {\r\n    getIsPlay,getProgress,\r\n    getCurrentTime,getDuration,\r\n    getActivateIndex,getPlayerIndex,\r\n    getMenusData,getPlayLyric\r\n} from '../../store/action'\r\nimport {NavLink,withRouter} from 'react-router-dom'\r\nimport localStorage from '../../utils/localStorage'\r\nimport {getIsMenusPlay, getSongRUrl,getSongLyric} from '../../api/index'\r\nimport Prompt from \"../content/Prompt\";\r\nimport lyricParser from \"../../utils/parseLyric\";\r\nconst {setLocalStorage,getLocalStorage} = localStorage\r\nclass SmallPlayer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // 音频节点\r\n        this.audioRef = createRef()\r\n    }\r\n    state = {\r\n        msg: ''\r\n    }\r\n    UNSAFE_componentWillMount() {\r\n        if (Object.keys(getLocalStorage('player') || []).length) {\r\n            this.modePlayer(getLocalStorage('player'), true)\r\n        }\r\n    }\r\n    // 点击切换音频播放的状态\r\n    handleClickToggle = () => {\r\n        const {isPlay,getIsPlay} = this.props\r\n        if (!isPlay) {\r\n            getIsPlay(true)\r\n            this.handlePlay()\r\n        } else {\r\n            getIsPlay(false)\r\n            this.handlePause()\r\n        }\r\n    }\r\n    // 当视频的时间改变的时候触发\r\n    handleTimeupdate = () => {\r\n        const audio = this.audioRef.current\r\n        const {currentTime,lyric,getActivateIndex} = this.props\r\n        // 当前播放的音频数值\r\n        this.props.getCurrentTime(audio.currentTime)\r\n        // 播放音乐的进度条宽度\r\n        const width = ((audio.currentTime / audio.duration) || 0) * 100 + '%'\r\n        this.props.getProgress(width)\r\n        // 当前激活歌词的index值\r\n        const activateIndex = lyric.findIndex((item, index, array) => {\r\n            const nextLyric = array[index + 1]\r\n            if (\r\n                item.time <= currentTime &&\r\n                (nextLyric ? currentTime < nextLyric.time : true)\r\n            ) {\r\n                return index\r\n            } else {\r\n                return 0\r\n            }\r\n        })\r\n        getActivateIndex(activateIndex === -1 ? 0 : activateIndex)\r\n    }\r\n    // 点击播放视频\r\n    handlePlay () {\r\n        const audio = this.audioRef.current\r\n        let playPromise = audio.play()\r\n        if (playPromise !== undefined) {\r\n            playPromise.then(() => {\r\n                audio.play()\r\n            }).catch(()=> {\r\n            })\r\n        }\r\n    }\r\n    // 点击关闭视频\r\n    handlePause () {\r\n        const audio = this.audioRef.current\r\n        if (audio) {\r\n            audio.pause()\r\n        }\r\n    }\r\n    // 开始播放视频的时候触发\r\n    handleCanPlay = () => {\r\n        const {getDuration,isPlay} = this.props\r\n        // 音频总共数值\r\n        const audio = this.audioRef.current\r\n        getDuration(audio.duration)\r\n        if (isPlay) {\r\n            this.handlePlay()\r\n        }\r\n    }\r\n    // 模式播放视频\r\n    async modePlayer (player, is) {\r\n        const {getPlayLyric,getMenusData} = this.props\r\n        try {\r\n            await getIsMenusPlay(player.id)\r\n            const result = await getSongRUrl(player.id)\r\n            const resultLyric = await getSongLyric(player.id)\r\n            const url = result.data.data[0].url\r\n            getMenusData({...player, url})\r\n            setLocalStorage('player', player)\r\n            getPlayLyric(lyricParser(resultLyric.data.lrc.lyric))\r\n            if (url && (!is)) {\r\n                const audio = this.audioRef.current\r\n                audio.load()\r\n                const playPromise =audio.play()\r\n                if (playPromise !== undefined) {\r\n                    playPromise.then(() => {\r\n                        audio.play()\r\n                    }).catch(()=> { })\r\n                }\r\n            } else {\r\n               if (!is) {\r\n                   this.handlePause()\r\n                   this.setState({\r\n                       msg: '该歌曲,无版权权限'\r\n                   }, () => {\r\n                       this.handlePause()\r\n                       getPlayLyric([])\r\n                       this.promptRef.handlePromptToggle()\r\n                   })\r\n               }\r\n            }\r\n        } catch (e) {\r\n            this.setState({\r\n                msg: '该歌曲,无版权权限'\r\n            }, () => {\r\n                this.handlePause()\r\n                getPlayLyric([])\r\n                getMenusData({...player, url: null})\r\n                setLocalStorage('player', player)\r\n                this.promptRef.handlePromptToggle()\r\n            })\r\n        }\r\n    }\r\n    // 播放视频的完成的时候触发\r\n    handleEonended = async () => {\r\n        const {modeNum,playerList,playerIndex,getPlayerIndex} = this.props\r\n        switch (modeNum) {\r\n            case 0 : // 顺序播放\r\n                let player = {}\r\n                if (playerIndex === (playerList.length-1)) {\r\n                    getPlayerIndex(0)\r\n                    setLocalStorage('playerIndex', 0)\r\n                    player = playerList[0]\r\n                } else {\r\n                    getPlayerIndex(playerIndex + 1)\r\n                    setLocalStorage('playerIndex', playerIndex + 1)\r\n                    player = playerList[playerIndex + 1]\r\n                }\r\n                this.modePlayer(player, false)\r\n                break;\r\n            case 1 : // 随机播放\r\n                const random = Math.floor(Math.random()*Math.floor(playerList.length))\r\n                getPlayerIndex(random)\r\n                setLocalStorage('playerIndex', random)\r\n                this.modePlayer(playerList[random], false)\r\n                break\r\n            case 2 : // 单曲循环\r\n                try {\r\n                    await getIsMenusPlay(getLocalStorage('player').id)\r\n                    this.audioRef.current.load()\r\n                    this.handlePlay()\r\n                } catch (e) {\r\n                    this.setState({\r\n                        msg: '该歌曲,无版权权限'\r\n                    }, () => {\r\n                        this.handlePause()\r\n                        getPlayLyric([])\r\n                        setLocalStorage('player', getLocalStorage('player'))\r\n                        this.promptRef.handlePromptToggle()\r\n                    })\r\n                }\r\n                break\r\n            default :\r\n                console.log('default')\r\n        }\r\n    }\r\n    render() {\r\n        const {player,location,progress,isPlay} = this.props\r\n        const {msg} = this.state\r\n        if (Object.keys(player).length) {\r\n            return (\r\n                <>\r\n                    <div className={'small_player'} style={{display: location.pathname === '/player' ? 'none' : 'flex'}}>\r\n                        <i className={isPlay ? 'iconfont icon-bofang1' : 'iconfont icon-kaishi'} onClick={this.handleClickToggle}></i>\r\n                        <NavLink  to={'/player'}>\r\n                            <img src={player.picUrl} alt={player.name}/>\r\n                        </NavLink>\r\n                        <div className=\"info\">\r\n                            <div className=\"msg\">\r\n                                <div className=\"text\">\r\n                                    <span>{player.name}</span>\r\n                                    {/* <span> / {player.al.name} - {player.ar[0].name}</span> */}\r\n                                </div>\r\n                                <div className=\"bar\" >\r\n                                    <div className=\"on\" style={{width: progress}}></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <audio\r\n                            src={player.url}\r\n                            ref={this.audioRef}\r\n                            preload=\"metadata\"\r\n                            onTimeUpdate={this.handleTimeupdate}\r\n                            onCanPlay={this.handleCanPlay}\r\n                            onEnded={this.handleEonended}\r\n                            className={'player_audio'}\r\n                        ></audio>\r\n                    </div>\r\n                    <Prompt msg={msg} ref={promptRef => this.promptRef = promptRef}/>\r\n                </>\r\n            );\r\n        } else {\r\n            return <Fragment></Fragment>\r\n        }\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(\r\n    state => ({\r\n        player: state.player,\r\n        progress: state.progress,\r\n        isPlay: state.isPlay,\r\n        currentTime: state.currentTime,\r\n        lyric: state.lyric,\r\n        modeTypeArr: state.modeTypeArr,\r\n        modeNum: state.modeNum,\r\n        playerList: state.playerList,\r\n        playerIndex: state.playerIndex\r\n    }),\r\n    {\r\n        getIsPlay,getProgress,\r\n        getCurrentTime,getDuration,\r\n        getActivateIndex,getPlayerIndex,\r\n        getMenusData,getPlayLyric\r\n    }\r\n)(SmallPlayer))\r\n\r\n\r\n","import React, { Component, Suspense } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport CacheRoute, { CacheSwitch } from \"react-router-cache-route\";\r\nimport { connect } from \"react-redux\";\r\nimport { stairRouter } from \"./router/index\";\r\nimport SmallPlayer from \"./component/common/SmallPlayer\";\r\nimport Loading from \"./component/content/Loading\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.setTheme(this.props.themeName.name);\r\n  }\r\n  // 设置主题\r\n  setTheme(name) {\r\n    const el = document.querySelector(\"#theme\");\r\n    el.href = `https://xxcool.top/theme/${name}.css`;\r\n  }\r\n  UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {\r\n    const { themeName } = nextProps;\r\n    if (themeName) {\r\n      this.setTheme(themeName.name);\r\n    }\r\n  }\r\n  render() {\r\n    const { location, loginStatus } = this.props;\r\n    return (\r\n      // 一级路由\r\n      <Suspense fallback={<Loading />}>\r\n        <section\r\n          style={{\r\n            paddingBottom:\r\n              location.pathname !== \"/player\" && Object.keys(loginStatus).length\r\n                ? \"41px\"\r\n                : \"0\",\r\n          }}\r\n        >\r\n          <CacheSwitch>\r\n            {stairRouter.map((item) => (\r\n              <CacheRoute\r\n                key={item.path}\r\n                path={item.path}\r\n                component={item.component}\r\n                // 一些是路由缓存插件的一些配置\r\n                when=\"always\"\r\n                behavior={(cached) =>\r\n                  cached\r\n                    ? {\r\n                        style: {\r\n                          position: \"absolute\",\r\n                          zIndex: -9999,\r\n                          opacity: 0,\r\n                          visibility: \"hidden\",\r\n                          pointerEvents: \"none\",\r\n                        },\r\n                        className: \"__CacheRoute__wrapper__cached\",\r\n                      }\r\n                    : {\r\n                        className: \"__CacheRoute__wrapper__uncached\",\r\n                      }\r\n                }\r\n                saveScrollPosition={true}\r\n              />\r\n            ))}\r\n            <Redirect to=\"/home/discover\" />\r\n          </CacheSwitch>\r\n        </section>\r\n        <SmallPlayer />\r\n      </Suspense>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(\r\n  connect((state) => ({\r\n    loginStatus: state.loginStatus,\r\n    themeName: state.themeName,\r\n  }))(App)\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/index\";\r\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\r\nimport { persistor } from \"./store/index\";\r\nimport \"./static/iconfont/iconfont.css\";\r\nimport \"./static/js/rem\";\r\nimport \"./static/css/reset.css\";\r\nimport \"./static/css/home.scss\";\r\nimport \"./static/css/recommend.scss\";\r\nimport \"./static/css/rank.scss\";\r\nimport \"./static/css/songSheet.scss\";\r\nimport \"./static/css/dj.scss\";\r\nimport \"./static/css/search.scss\";\r\nimport \"./static/css/my.scss\";\r\nimport \"./static/css/video.scss\";\r\nimport \"./static/css/player.scss\";\r\nimport \"./static/css/skin.scss\";\r\nimport \"./static/css/common.scss\";\r\nimport App from \"./App.js\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}