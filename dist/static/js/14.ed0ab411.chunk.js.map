{"version":3,"sources":["component/common/LazyLoading.js","static/images/loading-error.svg","static/images/loading.svg","component/common/ScrollHeader.js","views/Recommend/Recommend.js"],"names":["LazyLoading","props","config","options","error","require","loading","throttleWait","src","module","exports","ScrollHeader","setFixed","scrollTop","document","documentElement","headerDOM","headerRef","current","headerAntiShake","style","height","classList","add","remove","createRef","window","addEventListener","this","ref","className","children","removeEventListener","Component","setLocalStorage","localStorage","getLocalStorage","Recommend","state","songDetailsList","name","handleClick","item","index","a","getSongRUrl","id","resutlSongUrl","option","picUrl","al","ar","url","data","playerList","map","init","indexOf","push","getMenusData","getPlayerList","getPlayerIndex","getIsPlay","history","componentDidRecover","getData","cacheLifecycles","didRecover","Url","parse","location","search","query","getUserRecommend","resultRecommend","setState","dailySongs","getSongDetails","resultDetails","console","log","playlist","tracks","length","onClick","goBack","key","connect"],"mappings":"mHAAA,sCAqBeA,IAjBf,SAAsBC,GAIlB,IAAMC,EAAS,CAEXC,QAAS,CACLC,MAAOC,EAAQ,KACfC,QAASD,EAAQ,KACjBE,aAAc,KAGlBC,IAAKP,EAAMO,KAEf,OAAO,kBAAC,IAAaN,K,oBClBzBO,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,qC,uHCGtBC,E,kDACjB,WAAaV,GAAQ,IAAD,8BAChB,cAAMA,IAUVW,SAAW,WAKP,IAAMC,EAAYC,SAASC,gBAAgBF,UACrCG,EAAY,EAAKC,UAAUC,QAC7BL,EAAY,GACZ,EAAKM,gBAAgBD,QAAQE,MAAMC,OAAS,EAAKpB,MAAMoB,OAAS,KAChEL,EAAUM,UAAUC,IAAI,kBAExBP,EAAUM,UAAUE,OAAO,gBAC3B,EAAKL,gBAAgBD,QAAQE,MAAMC,OAAS,OApBhD,EAAKJ,UAAYQ,sBAEjB,EAAKN,gBAAkBM,sBALP,E,gEAQhBC,OAAOC,iBAAiB,SAAUC,KAAKhB,Y,+BAmBvC,OACI,yBAAKiB,IAAKD,KAAKT,iBACX,6BAASW,UAAU,GAAGD,IAAKD,KAAKX,WAC3BW,KAAK3B,MAAM8B,a,6CAOxBL,OAAOM,oBAAoB,SAAUJ,KAAKhB,c,GAtCRqB,c,uLCWlCC,G,OAAqCC,IAArCD,iBAAiBE,EAAoBD,IAApBC,gBACnBC,E,kDACJ,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAGRqC,MAAQ,CACNC,gBAAiB,GACjBC,KAAM,IANW,EA+BnBC,YA/BmB,uCA+BL,WAAOC,EAAMC,GAAb,qBAAAC,EAAA,sEAEgBC,YAAYH,EAAKI,IAFjC,OAENC,EAFM,OAINC,EAAS,CACbR,KAAME,EAAKF,KACXM,GAAIJ,EAAKI,GACTG,OAAQP,EAAKQ,GAAGD,OAChBE,GAAIT,EAAKS,GACTD,GAAIR,EAAKQ,GACTE,IAAKL,EAAcM,KAAKA,KAAK,GAAGD,KAG5BE,EAAa,EAAKhB,MAAMC,gBAAgBgB,KAAI,SAACb,GAAD,MAAW,CAC3DF,KAAME,EAAKF,KACXM,GAAIJ,EAAKI,GACTG,OAAQP,EAAKQ,GAAGD,OAChBE,GAAIT,EAAKS,GACTD,GAAIR,EAAKQ,QAGsB,KAD3BM,EAAOpB,EAAgB,gBAAkB,IACtCqB,QAAQf,EAAKF,QACpBgB,EAAKE,KAAKhB,EAAKF,MACfN,EAAgB,cAAesB,IAGjCtB,EAAgB,SAAUc,GAC1Bd,EAAgB,aAAcoB,GAC9BpB,EAAgB,cAAeS,GAE/B,EAAK1C,MAAM0D,aAAaX,GACxB,EAAK/C,MAAM2D,cAAcN,GACzB,EAAKrD,MAAM4D,eAAelB,GAC1B,EAAK1C,MAAM6D,WAAU,GACrB,EAAK7D,MAAM8D,QAAQL,KAAK,WAlCZ,4CA/BK,0DAoEnBM,oBAAsB,WACpB,EAAKC,WAnELhE,EAAMiE,gBAAgBC,WAAW,EAAKH,qBAFrB,E,wEAUjBpC,KAAKqC,Y,6JAIgBG,IAAIC,MAAMzC,KAAK3B,MAAMqE,SAASC,QAAQ,GAAMC,MAAzD1B,E,EAAAA,GAAIN,E,EAAAA,KACD,UAAPM,E,gCAE4B2B,c,OAAxBC,E,OACN9C,KAAK+C,SAAS,CACZpC,gBAAiBmC,EAAgBrB,KAAKA,KAAKuB,a,wCAGjBC,YAAe/B,G,QAArCgC,E,OACNC,QAAQC,IAAIF,EAAczB,KAAK4B,SAASC,QACxCtD,KAAK+C,SAAS,CACZpC,gBAAiBuC,EAAczB,KAAK4B,SAASC,OAC7C1C,S,sIA6CI,IAAD,SAC2BZ,KAAKU,MAA/BE,EADD,EACCA,KAAMD,EADP,EACOA,gBACd,OAAIA,EAAgB4C,OAAS,EAEzB,yBAAKrD,UAAU,aAEb,kBAAC,IAAD,CAAcT,OAAQ,KACpB,4BAAQS,UAAU,oBAChB,6BAASA,UAAU,wBACjB,uBACEA,UAAU,2BACVsD,QAAS,WACP,EAAKnF,MAAM8D,QAAQsB,YAGvB,2BAAI7C,GAAQ,6BAEd,6BAASV,UAAU,wBACjB,uBAAGA,UAAU,yBACb,0DAKN,wBAAIA,UAAU,kBACXS,EAAgBgB,KAAI,SAACb,EAAMC,GAAP,OACnB,wBAAI2C,IAAK3C,EAAOyC,QAAS,kBAAM,EAAK3C,YAAYC,EAAMC,KACpD,yBAAKb,UAAU,YACb,kBAAC,IAAD,CAAatB,IAAKkC,EAAKQ,GAAGD,SAC1B,yBAAKnB,UAAU,iBACb,uBAAGA,UAAU,SAASY,EAAKF,MAC3B,2BACGE,EAAKS,GAAG,GAAGX,KADd,MACuBE,EAAKQ,GAAGV,QAInC,yBAAKV,UAAU,WACb,uBAAGA,UAAU,+BASvB,yBAAKA,UAAU,aAEb,kBAAC,IAAD,CAAcT,OAAQ,KACpB,4BAAQS,UAAU,oBAChB,6BAASA,UAAU,wBACjB,uBACEA,UAAU,2BACVsD,QAAS,WACP,EAAKnF,MAAM8D,QAAQsB,eAM7B,yBAAKvD,UAAW,cACd,+E,GArIYG,aA6ITsD,sBAAQ,KAAM,CAC3B5B,iBACAC,kBACAE,cACAD,oBAJa0B,CAKZlD","file":"static/js/14.ed0ab411.chunk.js","sourcesContent":["import React from 'react'\r\n// 引入图片懒加载的插件\r\nimport Lazyload from \"r-img-lazyload\";\r\n\r\nfunction LazyLoading (props) {\r\n    // 我们使用图片懒加载的目的是缓解首屏加载的压力，优化用户体验\r\n\r\n    // 配置图片懒加载\r\n    const config = {\r\n        // 其他配置项\r\n        options: {\r\n            error: require(\"../../static/images/loading-error.svg\"), // 加载失败后展示的图像\r\n            loading: require(\"../../static/images/loading.svg\"), // 加载中展示的图像\r\n            throttleWait: 1000 // 节流等待时间\r\n        },\r\n        // 图片地址\r\n        src: props.src\r\n    };\r\n    return <Lazyload {...config}/>\r\n}\r\n\r\nexport default LazyLoading\r\n","module.exports = __webpack_public_path__ + \"static/media/loading-error.99e68751.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.0bab9ee3.svg\";","import React, { Component, createRef } from 'react'\r\n// 处理头部固定定位的时候 抖动问题的组件\r\n// 启动fixed定位的时候 我们要有一个节点来进行防抖(设置高)，否则会有抖动的问题\r\nexport default class ScrollHeader extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n        // ref标记头部的节点\r\n        this.headerRef = createRef()\r\n        // ref标记头部节点的防抖层\r\n        this.headerAntiShake = createRef()\r\n    }\r\n    componentDidMount () {\r\n        window.addEventListener('scroll', this.setFixed)\r\n    }\r\n    // 设置头部是否可以为fixed定位进行展示\r\n    setFixed = () => {\r\n        /* \r\n            props参数\r\n                height：固定防抖层的高度\r\n        */\r\n        const scrollTop = document.documentElement.scrollTop\r\n        const headerDOM = this.headerRef.current\r\n        if (scrollTop > 0) {\r\n            this.headerAntiShake.current.style.height = this.props.height + 'px'\r\n            headerDOM.classList.add('header_fixed')\r\n        } else {\r\n            headerDOM.classList.remove('header_fixed')\r\n            this.headerAntiShake.current.style.height = null\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div ref={this.headerAntiShake}>\r\n                <section className=\"\" ref={this.headerRef}>\r\n                    {this.props.children}\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n    // 组件销毁的时候清除定时器\r\n    componentWillUnmount () {\r\n        window.removeEventListener('scroll', this.setFixed)\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Url from \"url\"; // 解析query数据\r\nimport { connect } from \"react-redux\";\r\nimport { getSongDetails, getUserRecommend, getSongRUrl } from \"../../api/index\";\r\nimport {\r\n  getMenusData,\r\n  getPlayerList,\r\n  getIsPlay,\r\n  getPlayerIndex,\r\n} from \"../../store/action\";\r\nimport ScrollHeader from \"../../component/common/ScrollHeader\";\r\nimport LazyLoading from \"../../component/common/LazyLoading\";\r\nimport localStorage from \"../../utils/localStorage\";\r\nimport \"antd-mobile/dist/antd-mobile.css\";\r\nconst { setLocalStorage, getLocalStorage } = localStorage;\r\nclass Recommend extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    props.cacheLifecycles.didRecover(this.componentDidRecover);\r\n  }\r\n  state = {\r\n    songDetailsList: [], // 歌单详情列表数据\r\n    name: \"\", // 歌单名称\r\n  };\r\n  // 同步的方法进行请求数据\r\n  UNSAFE_componentWillMount() {\r\n    this.getData();\r\n  }\r\n  async getData() {\r\n    // 请求歌单详情数据\r\n    const { id, name } = Url.parse(this.props.location.search, true).query;\r\n    if (id === \"daily\") {\r\n      // 每日推荐\r\n      const resultRecommend = await getUserRecommend();\r\n      this.setState({\r\n        songDetailsList: resultRecommend.data.data.dailySongs,\r\n      });\r\n    } else {\r\n      const resultDetails = await getSongDetails(id);\r\n      console.log(resultDetails.data.playlist.tracks);\r\n      this.setState({\r\n        songDetailsList: resultDetails.data.playlist.tracks,\r\n        name,\r\n      });\r\n    }\r\n  }\r\n  // 点击歌曲\r\n  handleClick = async (item, index) => {\r\n    // 获取歌曲的url路径\r\n    const resutlSongUrl = await getSongRUrl(item.id);\r\n    // 歌曲播放需要的数据\r\n    const option = {\r\n      name: item.name,\r\n      id: item.id,\r\n      picUrl: item.al.picUrl,\r\n      ar: item.ar,\r\n      al: item.al,\r\n      url: resutlSongUrl.data.data[0].url,\r\n    };\r\n    // 整合歌单列表的数据 并且向全局状态发送值\r\n    const playerList = this.state.songDetailsList.map((item) => ({\r\n      name: item.name,\r\n      id: item.id,\r\n      picUrl: item.al.picUrl,\r\n      ar: item.ar,\r\n      al: item.al,\r\n    }));\r\n    const init = getLocalStorage(\"hot_history\") || [];\r\n    if (init.indexOf(item.name) === -1) {\r\n      init.push(item.name);\r\n      setLocalStorage(\"hot_history\", init);\r\n    }\r\n    // 进行本地存储\r\n    setLocalStorage(\"player\", option);\r\n    setLocalStorage(\"playerList\", playerList);\r\n    setLocalStorage(\"playerIndex\", index);\r\n    // 发送歌曲的数据\r\n    this.props.getMenusData(option);\r\n    this.props.getPlayerList(playerList);\r\n    this.props.getPlayerIndex(index);\r\n    this.props.getIsPlay(true); // 播放\r\n    this.props.history.push(\"/player\"); // 跳转\r\n  };\r\n  // 当前进入路由缓存组件的时候触发\r\n  componentDidRecover = () => {\r\n    this.getData();\r\n  };\r\n  render() {\r\n    const { name, songDetailsList } = this.state;\r\n    if (songDetailsList.length > 0) {\r\n      return (\r\n        <div className=\"recommend\">\r\n          {/* 歌单详情头部 */}\r\n          <ScrollHeader height={100}>\r\n            <header className=\"recommend_header\">\r\n              <section className=\"recommend_header_top\">\r\n                <i\r\n                  className=\"iconfont icon-jiantouzuo\"\r\n                  onClick={() => {\r\n                    this.props.history.goBack();\r\n                  }}\r\n                ></i>\r\n                <p>{name || \"每日推荐\"}</p>\r\n              </section>\r\n              <section className=\"recommend_header_all\">\r\n                <i className=\"iconfont icon-bofang\"></i>\r\n                <p>播放全部</p>\r\n              </section>\r\n            </header>\r\n          </ScrollHeader>\r\n          {/* 歌单详情列表 */}\r\n          <ul className=\"recommend_list\">\r\n            {songDetailsList.map((item, index) => (\r\n              <li key={index} onClick={() => this.handleClick(item, index)}>\r\n                <div className=\"song_des\">\r\n                  <LazyLoading src={item.al.picUrl} />\r\n                  <div className=\"song_des_info\">\r\n                    <p className=\"title\">{item.name}</p>\r\n                    <p>\r\n                      {item.ar[0].name} - {item.al.name}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"song_mv\">\r\n                  <i className=\"iconfont icon-tuya-\"></i>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"recommend\">\r\n          {/* 歌单详情头部 */}\r\n          <ScrollHeader height={100}>\r\n            <header className=\"recommend_header\">\r\n              <section className=\"recommend_header_top\">\r\n                <i\r\n                  className=\"iconfont icon-jiantouzuo\"\r\n                  onClick={() => {\r\n                    this.props.history.goBack();\r\n                  }}\r\n                ></i>\r\n              </section>\r\n            </header>\r\n          </ScrollHeader>\r\n          <div className={\"no_content\"}>\r\n            <p>未找到相关内容</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(null, {\r\n  getMenusData,\r\n  getPlayerList,\r\n  getIsPlay,\r\n  getPlayerIndex,\r\n})(Recommend);\r\n"],"sourceRoot":""}